・ツール保存dirを作成

$ mkdir ~/Documents/husingSRP091581/tools

・STARをDL、展開

$ wget https://github.com/alexdobin/STAR/archive/2.7.8a.tar.gz
$ tar -xzf 2.7.8a.tar.gz

・STARのインデックスの作成

$ mkdir ~/Documents/husingSRP091581/ref/STAR_reference
$ ~/Documents/husingSRP091581/tools/STAR-2.7.8a/bin/MacOSX_x86_64/STAR --runMode genomeGenerate --genomeDir ~/Documents/husingSRP091581/ref/STAR_reference --genomeFastaFiles ~/Documents/husingSRP091581/ref/Mus_musculus.GRCm39.dna.primary_assembly.fa --sjdbGTFfile ~/Documents/husingSRP091581/ref/Mus_musculus.GRCm39.103.gtf

ここまでやった
以下はこれから

・マッピング

$ mkdir -p ~/Documents/husingSRP091581/STAR
$ cd ~/Documents/husingSRP091581/STAR
今回はsingle-endなので下のように改変
$ for sample in `ls ../seq/*fastq.gz | xargs basename | cut -f1 -d"_" | uniq`; do echo mapping:${sample}; ../tools/STAR-2.7.8a/bin/MacOSX_x86_64/STAR --runMode alignReads --genomeDir ../ref/STAR_reference --readFilesCommand gunzip -c --readFilesIn ../seq/${sample}  --outSAMtype BAM SortedByCoordinate --runThreadN 4 --quantMode TranscriptomeSAM --outFileNamePrefix ${sample};done; echo finished


・source codeを ~/Documents/expression/tools にダウンロードしたのちファイルを解凍（https://deweylab.github.io/RSEM/よりLatest version）

$ cd ~/Documents/husingSRP091581/tools
$ tar -zxvf RSEM-1.3.3.tar.gz

・RSEMのインデックスの作成

$ mkdir ~/Documents/husingSRP091581/ref/RSEM_reference

RSEMのdirで

$ make install
$ ../tools/RSEM-1.3.3/rsem-prepare-reference --num-threads 4 --gtf Mus_musculus.GRCm39.103.gtf Mus_musculus.GRCm39.dna.primary_assembly.fa RSEM_reference/RSEM_reference

・発現量定量

$ cd ~/Documents/husingSRP091581/STAR
$ for sample in `ls ../seq/*fastq.gz | xargs basename | cut -f1 -d"_" | uniq`; do ../tools/RSEM-1.3.3/rsem-calculate-expression --num-threads 4 --bam ${sample}Aligned.toTranscriptome.out.bam ../ref/RSEM_reference/RSEM_reference ${sample}; done

・RSEMで出力したファイルがどのサンプルに対応するのか、各サンプルはどの群（例：case、control）に属するのかを記述したファイルを準備、
DESeq2で処理＠Rコンソール、~/Documents/husingSRP091581/STARをcurrent dirに

df <- read.csv("../seq/SraRunTable.txt",stringsAsFactors=F)
df2 <- data.frame(sample=df$Run, group=df$diseasestatus, path=paste0(df$Run, ".genes.results"))
write.table(df2, "sample2condition.txt" ,row.names=F, quote=F, sep="\t")

install.packages("BiocManager")
BiocManager::install("DESeq2")
BiocManager::install("tximport")
library(DESeq2)
library(tximport)

サンプル情報を記載したリストを読み込む
s2c <- read.table("sample2condition.txt", header=T, sep="\t", stringsAsFactors=F)
s2c$group <- gsub(" ", "_", s2c$group)

RSEMの出力ファイルの読み込み
files <- s2c$path
names(files) <- s2c$sample
txi <- tximport(files, type="rsem", txIn=F, txOut=F)
txi$length[txi$length==0] <- 1

サンプル情報を読み込む
sampleTable <- data.frame(condition=s2c$group)
rownames(sampleTable) <- colnames(txi$counts)
dds <- DESeqDataSetFromTximport(txi, sampleTable, ~condition)

Wald検定
dds_wt <- DESeq(dds)
res_wt <- results(dds_wt)
res_wt_naomit <- na.omit(res_wt)

尤度比検定
dds_lrt <- DESeq(dds, test="LRT", reduced=~1)
res_lrt <- results(dds_lrt)
res_lrt_naomit <- na.omit(res_lrt)

解析結果を表示・保存する（下記はWald検定の結果を扱う場合の例。尤度比検定の結果を用いる場合は res_wt_naomit を res_lrt_naomit に変更する）
遺伝子名の付与（アノテーション）
t2g <- read.table("../ref/target2gene.txt",header=T,stringsAsFactors=F)
res_wt_naomit$ens_gene <- row.names(res_wt_naomit)
res_wt_naomit_annot <- merge(as.data.frame(res_wt_naomit), unique(t2g[,2:3]), by="ens_gene")

発現変動のある転写産物を補正済みp値の低い順に並べる
res_wt_naomit_annot_sort <- res_wt_naomit_annot[order(res_wt_naomit_annot$padj),]

発現変動の大きな遺伝子、上位20個を表示させる（補正済みp値の低い20遺伝子）
head(res_wt_naomit_annot_sort, 20)

各カラムの説明は下記コマンドで表示させる
mcols(res_wt_naomit)

データフレームの保存
write.table(res_wt_naomit_annot_sort, "Wald-test.result.txt", sep="\t", quote=F, row.names=F)

作図・表示させるコマンド
plotMA(res_wt, ylim=c(-2, 2))

保存する
png("MAplot.png")
plotMA(res_wt, ylim=c(-10, 10))
dev.off()

特定の遺伝子の発現量（count）を示すプロットを作図
発現変動の大きな遺伝子を表示させる
head(res_wt_naomit_annot_sort)

以下原文
FASN (ENSG00000169710) という遺伝子の発現変動が大きかったので、この発現量をプロットする
発現量を図示する
plotCounts(dds, gene="ENSG00000169710", intgroup="condition")
保存する際はMA-plotと同様
png("ENSG00000169710.png")
plotCounts(dds, gene="ENSG00000169710", intgroup="condition")
dev.off()
自前で作図するためにデータのみを抽出したい場合は returnData=T を加える
d <- plotCounts(dds, gene="ENSG00000169710", intgroup="condition", returnData=T)






